@model AllFlightsQueryModel
@inject SignInManager<Passanger> SignInManager


<h4 class="display-5">Outgoing Flights!</h4>
@if (!Model.Flights.Any())
{
    <div class="text-center">
        <p class="lead">There are no return flight options currently for the selected dates. Please check again later.</p>
    </div>
}
else
{
    <div class="flight-block">
        @foreach (var flight in Model.Flights)
        {
            <section class="div-planes-partial card mb-3 flex-flights percent80width gap40">
                <div class="margin-left-25 text-center">
                    @if (User.IsAdmin())
                    {
                        <a asp-area="Admin" asp-controller="Flights" asp-action="Edit" asp-route-id="@flight.Id" class="btn btn-warning">Edit</a>
                        <a asp-area="Admin" asp-controller="Flights" asp-action="ChangeVisibility" asp-route-id="@flight.Id" class="btn btn-info float-right ml-3">@(flight.IsPublic ? "Hide" : "Show")</a>
                    }
                    else
                    {
                        @if (SignInManager.IsSignedIn(User))
                        {
                            <input type="button" id="btnAddToBookings" value="Book" class="btn btn-primary btn-block" />
                            <input type="hidden" id="flightId" value=@flight.Id />
                            var passangerCount = (@Model.Passangers == 1) ? "passanger" : "passangers";

                            <div id="snackbar">Flight to @flight.EndLocation has been booked for @Model.Passangers @passangerCount.</div>
                        }
                    }
                </div>
                <section class="border-solid-1 flex-flights distributed-flex">
                    <div class="margin-5-all flex-column-regular">
                        <h5 class="flight-info text-center"> Travel Path</h5>
                        <h6 class="flight-info m-auto text-center"> @flight.StartLocation to @flight.EndLocation </h6>
                    </div>
                    <div class="margin-5-all flex-column-regular">
                        <h5 class="flight-info text-center">Date of flight</h5>
                        <h6 class="flight-info m-auto text-center">@flight.FlightDate?.ToShortDateString()</h6>
                    </div>
                </section>

                <section class="div-planes-partial card mb-3 flight-item flex-2 flex-150 distributed-flex">
                    <h6 class="flight-info">Price per seat</h6>
                    <div>@flight.Price BGN</div>

                </section>
            </section>
        }
    </div>
}

@if (Model.TripType == "2")
{
    <h4 class="display-5">Return Flights!</h4>

    @if (!Model.ReturnFlights.Any())
    {
        <div class="text-center">
            <p class="lead">There are no return flight options currently for the selected dates. Please check again later.</p>
        </div>
    }
    else
    {
        <div class="flight-block">

            @foreach (var returnflight in Model.ReturnFlights)
            {
                <section class="div-planes-partial card mb-3 flex-flights percent80width gap40">
                    <div class="margin-left-25 text-center">
                        @if (User.IsAdmin())
                        {
                            <a asp-area="Admin" asp-controller="Flights" asp-action="Edit" asp-route-id="@returnflight.Id" class="btn btn-warning">Edit</a>
                            <a asp-area="Admin" asp-controller="Flights" asp-action="ChangeVisibility" asp-route-id="@returnflight.Id" class="btn btn-info float-right ml-3">@(returnflight.IsPublic ? "Hide" : "Show")</a>
                        }
                        else
                        {
                            @if (SignInManager.IsSignedIn(User))
                            {
                                <input type="button" id="btnAddToBookings" value="Book" class="btn btn-primary btn-block" />
                                <input type="hidden" id="flightId" value=@returnflight.Id />
                                var passangerCount = (@Model.Passangers == 1) ? "passanger" : "passangers";

                                <div id="snackbar">Flight to @returnflight.EndLocation has been booked for @Model.Passangers @passangerCount.</div>
                            }
                        }
                    </div>
                    <section class="border-solid-1 flex-flights distributed-flex">
                        <div class="margin-5-all flex-column-regular">
                            <h5 class="flight-info text-center"> Travel Path</h5>
                            <h6 class="flight-info m-auto text-center"> @returnflight.StartLocation to @returnflight.EndLocation </h6>
                        </div>
                        <div class="margin-5-all flex-column-regular">
                            <h5 class="flight-info text-center">Date of flight</h5>
                            <h6 class="flight-info m-auto text-center">@returnflight.FlightDate?.ToShortDateString()</h6>
                        </div>
                    </section>

                    <section class="div-planes-partial card mb-3 flight-item flex-2 flex-150 distributed-flex">
                        <h6 class="flight-info">Price per seat</h6>
                        <div>@returnflight.Price BGN</div>

                    </section>
                </section>
            }
        </div>
    }

}


<script>
    const buttons = document.querySelectorAll('#btnAddToBookings');
    const returnButtons = document.querySelectorAll('#btnAddToBookingsReturn');
    var countOfSeats = @Html.Raw(Json.Serialize(Model.Passangers));

    buttons.forEach(btn => btn.addEventListener('click', (e) => {
        var id = e.target.parentElement.children[1].value;

        e.target.disabled = true;

        var x = document.getElementById("snackbar");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);

        fetch(`/Bookings/Book`, {
            method: 'POST',
            headers: {
                'Content-type': 'application/json',
            },
            body: JSON.stringify({
                flightId: id,
                countOfFlightSeats: countOfSeats
            })
        }).then(function (response) {
            if (response.ok) {
                return response.json();
            }
            return Promise.reject(response);
        }).then(data => {
            console.log('Success:' + countOfSeats);
        }).catch(function (error) {
            console.warn('Please Contact Support', error);
        });
    }));



    returnButtons.forEach(btn => btn.addEventListener('click', (e) => {
        var id = e.target.parentElement.children[1].value;

        e.target.disabled = true;

        var x = document.getElementById("snackbarReturn");
        x.className = "show";
        setTimeout(function () { x.className = x.className.replace("show", ""); }, 3000);

        fetch(`/Bookings/Book`, {
            method: 'POST',
            headers: {
                'Content-type': 'application/json',
            },
            body: JSON.stringify({
                flightId: id,
                countOfFlightSeats: countOfSeats
            })
        }).then(function (response) {
            if (response.ok) {
                return response.json();
            }
            return Promise.reject(response);
        }).then(data => {
            console.log('Success:' + countOfSeats);
        }).catch(function (error) {
            console.warn('Please Contact Support', error);
        });
    }));


</script>

